{"version":3,"sources":["components/error-indicator/death-star.png","components/header/index.js","components/header/header.js","services/api-service.js","components/spinner/index.js","components/spinner/spinner.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/random-planet/random-planet.js","components/random-planet/index.js","components/error-boundry/index.js","components/error-boundry/error-boundry.js","services/dummy-swapi-service.js","components/swapi-service-context/swapi-service-context.js","components/hoc-helpers/with-date.js","components/hoc-helpers/with-swapi-service.js","components/item-list/item-list.js","components/item-list/index.js","components/sw-components/item-lists.js","components/error-button/index.js","components/error-button/error-button.js","components/item-details/item-details.js","components/item-details/index.js","components/sw-components/person-details.js","components/sw-components/planet-details.js","components/sw-components/starship-details.js","components/row/index.js","components/row/row.js","components/pages/people-page.js","components/pages/planets-page.js","components/pages/starships-page.js","components/pages/login-page.js","components/pages/secret-page.js","components/app/index.js","components/app/app.js","index.js"],"names":["module","exports","Header","onServiceChange","className","to","onClick","ApiService","_apiBase","_imageBase","getResource","url","a","fetch","res","ok","Error","status","json","getAllPeople","results","map","_transformPerson","slice","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","getPersonImage","getStarshipImage","getPlanetImage","_extractId","item","match","name","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","gender","birthYear","birth_year","eyeColor","eye_color","population","rotationPeriod","rotation_period","diameter","Spinner","ErrorIndicator","src","icon","alt","RandomPlanet","apiService","state","loading","onPlanetLoaded","setState","error","onError","updatePlanet","Math","floor","random","then","catch","updateInterval","this","props","interval","setInterval","clearInterval","hasDate","errorMessage","spinner","content","Component","defaultProps","PlanetView","Fragment","ErrorBoundry","hasError","info","children","DummySwapiService","_people","_planets","_starships","React","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","withData","View","data","prevProps","getData","update","WithSwapiService","Wrapped","mapMethodsToProps","swapiService","serviceProps","ItemList","onItemSelected","renderLabel","items","label","key","withChildFunction","fn","renderName","PersonList","PlanetList","StarshipList","ErrorButton","renderError","foo","bar","Record","field","ItemDetails","image","swapiServive","updateItem","itemId","getImageUrl","Children","child","cloneElement","Row","left","right","withRouter","history","params","push","LoginPage","isLoggedIn","onLogin","SecretPage","onLogOut","App","showRandomPlanet","Service","console","log","value","path","render","exact","component","PeoplePage","PlanetsPage","StarshipsPage","alertMessage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9ef9f7e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/death-star.aa1e2de2.png\";","import Header from './header';\nexport default Header;","import React from 'react';\nimport './header.css';\nimport { Link } from 'react-router-dom';\n\nconst Header = ({ onServiceChange }) => {\n\n    return (\n        <div className=\"header d-flex\">\n            <h3>\n                <Link to='/stardb-react'>Star DB</Link>\n            </h3>\n            <ul className=\"d-flex\">\n                <li>\n                    <Link to='/stardb-react/people/'>People</Link>\n                </li>\n                <li>\n                    <Link to='/stardb-react/planets'>Planets</Link>\n                </li>\n                <li>\n                    <Link to='/stardb-react/starships/'>Starships</Link>\n                </li>\n                <li>\n                    <Link to='/stardb-react/secret'>Secret</Link>\n                </li>\n                <li>\n                    <Link to='/stardb-react/login'>Login</Link>\n                </li>\n            </ul>\n            <button\n                onClick={onServiceChange}\n                className='btn btn-primary btn-small'>\n                Change Service\n            </button>\n        </div>\n    );\n}\n\nexport default Header;","export default class ApiService {\n\n    _apiBase = 'https://swapi.dev/api';\n    _imageBase = 'https://starwars-visualguide.com/assets/img';\n\n    getResource = async (url) => {\n        const res = await fetch(`${this._apiBase}${url}`);\n        // if url don`t return status 200-299 we see error message\n        if (!res.ok) {\n            throw new Error(`Could not fetch ${url}, received ${res.status}`);\n        }\n        return await res.json();\n    }\n\n    // whis func return array from api / in api we have results\n    getAllPeople = async () => {\n        const res = await this.getResource(`/people/`);\n        return res.results\n            .map(this._transformPerson)\n            .slice(0, 5);\n    };\n\n    getPerson = async (id) => {\n        const person = await this.getResource(`/people/${id}/`);\n        return this._transformPerson(person);\n    };\n\n    // whis func return array from api / in api we have results\n    getAllPlanets = async () => {\n        const res = await this.getResource(`/planets/`);\n        return res.results\n            .map(this._transformPlanet)\n            .slice(0, 5);\n    };\n\n    // bu funq tam hazir fung oldu, bunu componentlerden cagiraraq deyerleri aliriq\n    // api-den hansi deyerleri cekmek istediyimizi burda deyirik, _transformBerries-le\n    getPlanet = async (id) => {\n        const planet = await this.getResource(`/planets/${id}/`);\n        return this._transformPlanet(planet);\n    };\n\n    // whis func return array from api / in api we have results\n    getAllStarships = async () => {\n        const res = await this.getResource(`/starships/`);\n        return res.results\n            .map(this._transformStarship)\n            .slice(0, 5);\n    };\n\n    getStarship = async (id) => {\n        const starship = await this.getResource(`/starships/${id}/`);\n        return this._transformStarship(starship);\n    };\n\n    getPersonImage = ({ id }) => {\n        return `${this._imageBase}/characters/${id}.jpg`\n    };\n\n    getStarshipImage = ({ id }) => {\n        return `${this._imageBase}/starships/${id}.jpg`\n    };\n\n    getPlanetImage = ({ id }) => {\n        return `${this._imageBase}/planets/${id}.jpg`\n    }\n\n    _extractId = (item) => {\n        const idRegExp = /\\/([0-9]*)\\/$/;\n        return item.url.match(idRegExp)[1];\n    }\n\n    // asagida api bize birbasa id vermese asagidaki 2 setrden istifade etmek olar\n    // url-den goryrmekcun id ni istifade olunur regex\n    _transformStarship = (starship) => {\n        return {\n            id: this._extractId(starship),\n            name: starship.name,\n            model: starship.model,\n            manufacturer: starship.manufacturer,\n            costInCredits: starship.cost_in_credits,\n            length: starship.length,\n            crew: starship.crew,\n            passengers: starship.passengers,\n            cargoCapacity: starship.cargo_capacity\n        }\n    };\n\n    _transformPerson = (person) => {\n        return {\n            id: this._extractId(person),\n            name: person.name,\n            gender: person.gender,\n            birthYear: person.birth_year,\n            eyeColor: person.eye_color\n        }\n    }\n\n    _transformPlanet = (planet) => {\n        return {\n            id: this._extractId(planet),\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter\n        };\n    };\n}\n\n\n\n//const pacapi = new ApiService();\n\n// we get all names of pakemons\n// pacapi.getAllGame().then((pakemon) => {\n//     pakemon.forEach((p) => {\n        //console.log(p.name);\n//     })\n// });\n\n// we get name of pakemon\n// pacapi.getGame(5).then((body) => {\n    //console.log(body.name);\n// })","import Spinner from './spinner';\nexport default Spinner;","import React from 'react';\nimport './spinner.css';\n\nconst Spinner = () => {\n    return (\n        <div className=\"ids-css\">\n            <div className=\"loadingio-spinner-spin-ggjbnq9lyds\"><div className=\"ldio-a14uivnmz8d\">\n                <div><div></div></div><div><div></div></div><div><div></div></div><div><div></div></div><div><div></div></div><div><div></div></div><div><div></div></div><div><div></div></div>\n            </div></div>\n        </div>\n\n    )\n}\n\nexport default Spinner;","import ErrorIndicator from './error-indicator';\nexport default ErrorIndicator;","import React from 'react';\nimport './error-indicator.css';\nimport icon from './death-star.png'\n\nconst ErrorIndicator = () => {\n    return (\n      <div className=\"error-indicator\">\n        <img src={icon} alt=\"error icon\" className=\"error-img\"/>\n        <span className=\"boom\">BOOM!</span>\n        <span>\n          something has gone terribly wrong\n        </span>\n        <span>\n          (but we already sent droids to fix it)\n        </span>\n      </div>\n    );\n  };\n  \n  export default ErrorIndicator;","import React, { Component } from 'react';\nimport './random-planet.css';\nimport ApiService from '../../services/api-service';\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\nimport PropTypes from 'prop-types';\n\n/*\n- state yaziriq asagida klasin icine\n- const la destruks edib divvlerin icine yaziriq\n- api service-i import edib objekt yaradiriq new ile\n- updateBerries funq yaradiriq, melumati setState ile otururuk\n- constryktorun icinde bu funqsiyani cagiririq\n- image deyishsin deye link elave edirik, id hissesini deyisirik\n- random qunqsiya elave edirik\n*/\n\nexport default class RandomPlanet extends Component {\n\n    static defaultProps = {\n      updateInterval: 10000\n    }\n\n    // bu props-u tipini yoxlayir\n    // bunu yazmadan evvel project-de npm install prop-types edirik\n    // isRequired de yazmaq olur. defaultProps olanda isRequired ishlemir\n    static propTypes = {\n      updateInterval: PropTypes.number\n    }\n\n    apiService = new ApiService();\n\n    // loading state-i spinnerin zaqruzkadan evvel gorunmesi ucundu\n    state = {\n        planet: {},\n        loading: true\n    }\n\n    // construktorun icindeki kodu compDIdMOunt-a atdim, best praktice budu\n    // constructor(){\n    //     super();\n    // }\n\n    componentDidMount(){\n        const {updateInterval} = this.props; \n        this.updatePlanet();\n        this.interval = setInterval(this.updatePlanet, updateInterval);\n    }\n\n    // bunu etmesek toggle etdikce interval-lar silinmeyecek, get-gede suretlenecek\n    componentWillUnmount(){\n        clearInterval(this.interval);\n    }\n\n    onPlanetLoaded = (planet) => {\n        this.setState({\n            planet,\n            loading: false,\n            error: false\n        })\n    }\n\n    // asagida loading-i false edirikki yeni error-a catibsa demeli loading olmayacaq\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n\n    // api-service-de api-den hansi melumatlarin lazim oldugunu qeyd etdik\n    // api-den aldigumiz obyektle state-i update edirik\n    updatePlanet = () => {\n        const id = Math.floor(Math.random()*17) + 2;\n        this.apiService.getPlanet(id)\n        .then(this.onPlanetLoaded)\n        .catch(this.onError)\n    }\n\n\n    render() {\n        const { planet, loading, error } = this.state;\n\n        const hasDate = !(loading || error);\n        const errorMessage = error ? <ErrorIndicator/> : null;\n        \n\n        // spinner ucun esas mentiq asagidakidi, loading state-i true olduqda spinneri\n        // eks halda img ve div olan hisseni gosterir\n        const spinner = loading ? <Spinner/> : null;\n        const content = hasDate ? <PlanetView planet = {planet}/> : null;\n\n        return (\n            <div className=\"random-planet jumbotron rounded\">\n                {errorMessage}\n                {spinner}                \n                {content}\n            </div>\n        );\n    }\n}\n\n// spinneri yerlesdirmek ucun yeni component yaratdim\nconst PlanetView = ({ planet }) => {\n    const { id, name, population,\n        rotationPeriod, diameter } = planet;\n    \n      return (\n        <React.Fragment>\n          <img className=\"planet-image\"\n               src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}\n               alt=\"planet\" />\n          <div>\n            <h4>{name}</h4>\n            <ul className=\"list-group list-group-flush\">\n              <li className=\"list-group-item\">\n                <span className=\"term\">Population</span>\n                <span>{population}</span>\n              </li>\n              <li className=\"list-group-item\">\n                <span className=\"term\">Rotation Period</span>\n                <span>{rotationPeriod}</span>\n              </li>\n              <li className=\"list-group-item\">\n                <span className=\"term\">Diameter</span>\n                <span>{diameter}</span>\n              </li>\n            </ul>\n          </div>\n        </React.Fragment>\n      );   \n}; ","import RandomPlanet from './random-planet';\nexport default RandomPlanet;","import ErrorBoundry from './error-boundry';\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport ErrorIndicator from '../error-indicator';\n\n\nexport default class ErrorBoundry extends Component{\n    state = {\n        hasError: false\n    }\n    // error ve infonu inspect-de gormek olar\n    // bir component-de ashibka olsa diger componentler calisacaq\n    componentDidCatch(error, info) {\n        this.setState({\n            hasError: true\n        })\n    }\n    render(){\n\n        if(this.state.hasError){\n            return <ErrorIndicator/>\n        }\n        return(\n            this.props.children\n        )\n    }\n}\n","export default class DummySwapiService {\n\n    _people = [\n      {\n        id: 1,\n        name: 'Bilbo Baggins [TEST DATA]',\n        gender: 'male',\n        birthYear: 'long ago',\n        eyeColor: 'dark brown'\n      },\n  \n      {\n        id: 2,\n        name: 'Frodo Baggins [TEST DATA]',\n        gender: 'male',\n        birthYear: 'long ago',\n        eyeColor: 'dark brown'\n      }\n    ];\n  \n    _planets = [\n      {\n        id: 1,\n        name: 'Earth [TEST DATA]',\n        population: '7.530.000.000',\n        rotationPeriod: '23 hours 56 seconds',\n        diameter: '12.742 km'\n      },\n      {\n        id: 2,\n        name: 'Venus [TEST DATA]',\n        population: 'not known',\n        rotationPeriod: '243 days',\n        diameter: '12.104 km'\n      }\n    ];\n  \n    _starships = [\n      {\n        id: 1,\n        name: 'USS Enterprise [TEST DATA]',\n        model: 'NCC-1701-C',\n        manufacturer: 'Northrop Grumman Shipbuilding',\n        costInCredits: 'not known',\n        length: 'approx 300 meters',\n        crew: 1000,\n        passengers: 50,\n        cargoCapacity: 100\n      }\n    ];\n  \n    getAllPeople = async () => {\n      return this._people;\n    };\n  \n    getPerson = async () => {\n      return this._people[0];\n    };\n  \n    getAllPlanets = async () => {\n      return this._planets;\n    };\n  \n    getPlanet = async () => {\n      return this._planets[0]\n    };\n  \n    getAllStarships = async () => {\n      return this._starships;\n    };\n  \n    getStarship = async () => {\n      return this._starships[0];\n    };\n  \n    getPersonImage = () => {\n      return `https://placeimg.com/400/500/people`\n    };\n  \n    getStarshipImage = () => {\n      return `https://placeimg.com/600/400/tech`;\n    };\n  \n    getPlanetImage = () => {\n      return `https://placeimg.com/400/400/nature`\n    };\n  }","import React from 'react';\n\n// ApiService-in butun componentlerde elcatan olmasi ucun context-den istifade edirik\n// Provideri App.js de import edib istifade edirik\n// Comsumer-i ise Details.js faylinda\n\nconst {\n    Provider: SwapiServiceProvider,\n    Consumer: SwapiServiceConsumer\n} = React.createContext();\n\nexport {\n    SwapiServiceProvider,\n    SwapiServiceConsumer\n};\n","import React, { Component } from 'react';\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\n\nconst withData = (View) => {\n  return class extends Component {\n\n    state = {\n      data: null,\n      loading: true,\n      error: false\n    };\n\n    // getData deyisibse o demekdirki service deyisib\n    componentDidUpdate(prevProps) {\n      if (this.props.getData !== prevProps.getData){\n        this.update();\n      }\n    }\n\n    componentDidMount() {\n      this.update();\n    }\n\n    update() {\n\n      this.setState({\n        loading: true,\n        error: false\n      });\n\n      this.props.getData()\n        .then((data) => {\n          this.setState({\n            data,\n            loading: false\n          });\n        })\n        .catch(() => {\n          this.setState({\n            error: true,\n            loading: false\n          })\n        })\n    }\n\n    render() {\n      const { data, loading, error } = this.state;\n\n      if (loading) {\n        return <Spinner />;\n      }\n\n      if (error) {\n        return <ErrorIndicator />\n      }\n\n      return <View {...this.props} data={data} />;\n    }\n  };\n};\n\nexport default withData;","import React from 'react';\nimport { SwapiServiceConsumer } from '../swapi-service-context';\n\n// hoc\n// birinci argument componentdi, amma ikinci argument service-deki konkret methodlardi\nconst WithSwapiService = (Wrapped, mapMethodsToProps) => {\n    return (props) => {\n        return (\n            <SwapiServiceConsumer>\n                {\n                    (swapiService) => {\n                        const serviceProps = mapMethodsToProps(swapiService);\n                        return (\n                            <Wrapped {...props} {...serviceProps} />\n                        )\n                    }\n                }\n            </SwapiServiceConsumer>\n        )\n    }\n}\n\nexport default WithSwapiService;","import React from 'react';\nimport './item-list.css';\nimport PropTypes from 'prop-types';\n\nconst ItemList = (props) => {\n\n    const { data, onItemSelected, children: renderLabel } = props;\n\n    const items = data.map((item) => {\n        const { id } = item;\n        const label = renderLabel(item);\n\n        return (\n            <li className=\"list-group-item\"\n                key={id}\n                onClick={() => onItemSelected(id)}>\n                {label}\n            </li>\n        );\n    });\n\n    return (\n        <ul className=\"item-list list-group\">\n            {items}\n        </ul>\n    );\n};\n\n// onItemSelected peoplepage-de istifade olunur\n// bu olmasa onItemSelected-e deyer vermesekde error cixmayacaq\n// yoxlamaq ucun peoplepage-de sil personList in qarshisindakini, error olmayacaq\nItemList.defaultProps = {\n    onItemSelected: () => {}\n}\n\n// prop-larin tiplerini yoxlamaq ucun\nItemList.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onItemSelected: PropTypes.func,\n    children: PropTypes.func.isRequired\n}\n\n// const { getAllPeople } = new ApiService();\n// export default withData(ItemList, getAllPeople);\n\n// yuxaridaki iki setr qalanda itemlist comp ancaq people qaytarir\n\nexport default ItemList; ","import ItemList from './item-list';\nexport default ItemList;\n","import React from 'react';\nimport { withData, WithSwapiService } from '../hoc-helpers';\n//import ApiService from '../../services/api-service';\nimport ItemList from '../item-list';\n\n// melumatlari context-den alacagimiz ucun asagidakilar lazim deyil\n// const swapiService = new ApiService();\n\n// const {\n//     getAllPeople,\n//     getAllStarships,\n//     getAllPlanets\n// } = swapiService;\n\n\n// funqsiya compozisiya movzusu\n// Wrapped yerinde her hansi component ola biler\n// children yerideki ise funqsiyadi\nconst withChildFunction = (Wrapped, fn) => {\n    return (props) => {\n        return (\n            <Wrapped {...props}>\n                {fn}\n            </Wrapped>\n        )\n    }\n}\n\n// yuxarida fn-in yerinde ola bilecek funqsiyalar\nconst renderName = ({ name }) => <span>{name}</span>\nconst renderModelAndName = ({ model, name }) => <span>{name} ({model})</span>\n\nconst mapPersonMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getAllPeople\n    }\n}\n\nconst mapPlanetMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getAllPlanets\n    }\n}\n\nconst mapStarshipMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getAllStarships\n    }\n}\n\nconst PersonList = WithSwapiService(\n    withData(\n        withChildFunction(ItemList, renderName)),\n    mapPersonMethodsToProps);\n\nconst PlanetList = WithSwapiService(\n    withData(\n        withChildFunction(ItemList, renderName)),\n        mapPlanetMethodsToProps);\n\nconst StarshipList = WithSwapiService(\n    withData(\n        withChildFunction(ItemList, renderModelAndName)),\n        mapStarshipMethodsToProps);\n\nexport {\n    PersonList,\n    PlanetList,\n    StarshipList\n}","import ErrorButton from \"./error-button\";\nexport default ErrorButton;","import React, { Component } from 'react';\nimport \"./error-button.css\";\n\nexport default class ErrorButton extends Component {\n\n    state = {\n        renderError: false\n    }\n\n    render(){\n        if (this.state.renderError) {\n            this.foo.bar = 0;\n        }\n\n        // this error button create error\n        return(\n                <button\n                    className=\"error-button btn btn-danger btn-lg\"\n                    onClick={ () => this.setState({renderError: true})}>\n                Throw Error\n            </button>  \n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './item-details.css';\nimport ApiService from '../../services/api-service';\nimport ErrorButton from '../error-button';\n\n// hoc\nconst Record = ({ item, field, label }) => {\n  return (\n    <li className=\"list-group-item\">\n      <span className=\"term\">{label}</span>\n      <span>{ item[field] }</span>\n    </li>\n  );\n};\n\n// bir faylda yalniz bir export default ola biler, ona gore asagidaki kimi edirik\nexport {\n  Record\n};\n\n\nexport default class ItemDetails extends Component {\n\n  state = {\n    item: null,\n    image: null\n  }\n\n  swapiServive = new ApiService();\n\n  componentDidMount() {\n    this.updateItem();\n  }\n\n  componentDidUpdate(prevProps) {\n    //console.log(`didUpdate-den ${this.props.personId} ve ${prevProps.personId}`);\n\n    if (this.props.itemId !== prevProps.itemId ||\n      this.props.getData !== prevProps.getData ||\n      this.props.getImageUrl !== prevProps.getImageUrl) {\n      this.updateItem();\n    }\n  }\n\n  updateItem() {\n    const { itemId, getData, getImageUrl } = this.props;\n     //console.log(`updatePakemondan ${pakemonId}`);\n\n    if (!itemId) {\n      return;\n    }\n    getData(itemId)\n      .then((item) => {\n        this.setState({\n          item,\n          image: getImageUrl(item)\n        })\n      })\n  }\n\n  render() {\n\n    const { item, image } = this.state\n\n    if (!item) {\n      return <span className='select-msg'>Select any item!</span>;\n    }\n\n    const { name } = item;\n\n    return (\n\n      <div className=\"item-details card\">\n        <img className=\"item-image\"\n          src={image}\n          alt=\"item\"/>\n\n        <div className=\"card-body\">\n          <h4>{name}</h4>\n          <ul className=\"list-group list-group-flush\">\n            {/* react.children ile melumatlari rahat cekirik\n            app.js de bir nece children element veririk, burda iterasiya edir icinde\n            asagida cloneElementin icindeki item, melumatlari serverden cekir */}\n            {\n              React.Children.map(this.props.children, (child) => {\n                return React.cloneElement(child, { item });\n              })\n            }\n          </ul>\n          <ErrorButton />\n        </div>\n      </div>\n    )\n  }\n}","import ItemDetails, { Record } from './item-details';\n\nexport default ItemDetails;\n\n// hoc-u bele export edirler\nexport { Record };","import React from 'react';\nimport ItemDetails, { Record } from '../item-details';\n//import { SwapiServiceConsumer } from '../swapi-service-context';\n//context-le hoc ishlediyi ucun burdan sildim\nimport {WithSwapiService} from '../hoc-helpers';\n\nconst PersonDetails = (props) => {\n    return (\n        <ItemDetails {...props}>\n            <Record field=\"gender\" label=\"Gender\" />\n            <Record field=\"eyeColor\" label=\"Eye Color\" />\n        </ItemDetails>\n    )\n}\n\nconst mapMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getPerson,\n        getImageUrl: swapiService.getPersonImage\n    }\n}\n\nexport default WithSwapiService(PersonDetails, mapMethodsToProps);\n","import React from 'react';\nimport ItemDetails, { Record } from '../item-details';\n//import { SwapiServiceConsumer } from '../swapi-service-context';\n//context-le hoc ishlediyi ucun burdan sildim\nimport { WithSwapiService } from '../hoc-helpers';\n\nconst PlanetDetails = (props) => {\n        return (\n            <ItemDetails {...props}>\n                <Record field=\"population\" label=\"Population\" />\n                <Record field=\"rotationPeriod\" label=\"Rotation Period\" />\n                <Record field=\"diametr\" label=\"Diameter\" />\n            </ItemDetails>\n        )\n}\n\nconst mapMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getPlanet,\n        getImageUrl: swapiService.getPlanetImage\n    }\n}\n\nexport default WithSwapiService(PlanetDetails, mapMethodsToProps);","import React from 'react';\nimport ItemDetails, { Record } from '../item-details';\n//import { SwapiServiceConsumer } from '../swapi-service-context';\n//context-le hoc ishlediyi ucun burdan sildim\nimport { WithSwapiService } from '../hoc-helpers';\n\nconst StarshipDetails = (props) => {\n    return (\n        <ItemDetails {...props}>\n            <Record field=\"model\" label=\"Model\" />\n            <Record field=\"length\" label=\"Length\" />\n            <Record field=\"costInCredits\" label=\"Cost\" />\n        </ItemDetails>\n    )\n}\n\nconst mapMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getStarship,\n        getImageUrl: swapiService.getStarshipImage\n    }\n}\n\nexport default WithSwapiService(StarshipDetails, mapMethodsToProps);","import Row from './row';\nexport default Row;","import React from 'react';\nimport './row.css';\nimport PropTypes from 'prop-types';\n\n\nconst Row = ({left, right}) => {\n    return (\n        <div className=\"row mb2\">\n            <div className=\"col-md-6\">\n                {/* renderItem yazan hisse render funqsiya patterni adlanir, comp-in bir hissesini render edir \n                    jsx olaraq button da elave etmek olar meselcun asagidaki kimi\n                    renderItem = {(item) => (<span>{item.name} <button>!</button></span>)} */}\n                {left}\n            </div>\n            <div className=\"col-md-6\">\n                {right}\n            </div>\n        </div>\n    )\n}\n\n// PropTypes haqqinda basqa numune, bu projeye aid deyil\n// mes: prop-mus user object-i qebul etmelidi\n// role hissesinde ya user ya da admin qebul ede bileceyini qeyd edirik\n// MyComp.PropTypes = {\n//     user: PropTypes.shape({\n//         name: PropTypes.string,\n//         role: PropTypes.oneOf(['user', 'admin'])\n//     })\n// }\n// prop-types haqqinda daha etrafli asagidaki lindke ve ya reactin resmi doc.da\n//https://github.com/airbnb/prop-types\nRow.propTypes = {\n    left: PropTypes.node,\n    right: PropTypes.node\n}\n\nexport default Row;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { PersonList, PersonDetails } from '../sw-components';\nimport Row from '../row';\n\nconst PeoplePage = ({ history, match }) => {\n\n  const {id} = match.params;\n\n  return (\n    <Row\n    left={<PersonList onItemSelected={(id) => history.push(id)} />}\n    right={<PersonDetails itemId = {id} />} />\n  )\n}\nexport default withRouter(PeoplePage);","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { PlanetList } from '../sw-components';\n\nconst PlanetsPage = ({ history }) => {\n  return (\n    <PlanetList onItemSelected={(itemId) => {\n      history.push(`/stardb-react/planets/${itemId}`)\n    }} />\n  );\n}\n\nexport default withRouter(PlanetsPage);\n\n\n\n\n\n\n\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { StarshipList } from '../sw-components';\n\n// burda kod daha qisadi, sadece olaraq, header.js-de url-in sonuna / qoyduq\n// diger page sehifeleri ile muqaise ele, bele daha best praktice-di\nconst StarshipsPage = ({ history }) => {\n  return (\n    <StarshipList onItemSelected={(id) => history.push(id)} />\n  );\n};\n\nexport default withRouter(StarshipsPage);\n\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst LoginPage = ({isLoggedIn, onLogin}) => {\n\n        if(isLoggedIn){\n            return <Redirect to='/stardb-react' />\n        }\n\n        return (\n            <div className='jumbotron text-center'>\n                <h4>Login to see Secret page</h4>\n\n                <button className='btn btn-primary' \n                        onClick={onLogin}>\n                            Login\n                </button>\n            </div>\n        )\n    }\n\nexport default LoginPage;","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst SecretPage = ({isLoggedIn, onLogOut}) => {\n\n    if (isLoggedIn){\n        return (\n            <div className='jumbotron text-center'>\n                <h3>This Page is full of Secrets!!!</h3>\n                <button className='btn btn-primary' \n                        onClick={onLogOut}>\n                            Log Out\n                </button>\n            </div>\n        )\n    }\n\n    return <Redirect to='/stardb-react/login' />\n}\n\nexport default SecretPage;","import App from './app';\n\nexport default App;","// new\nimport React, { Component } from 'react';\nimport Header from '../header';\nimport RandomPlanet from '../random-planet';\nimport ErrorBoundry from '../error-boundry';\nimport ApiService from \"../../services/api-service\";\nimport DummySwapiService from \"../../services/dummy-swapi-service\";\nimport './app.css';\n// contexti istifade etmekcu asagida import edirik\n// ve asagida butun comp-leri icine saliriq\nimport { SwapiServiceProvider } from '../swapi-service-context';\nimport { PeoplePage, PlanetsPage, StarshipsPage, SecretPage, LoginPage } from '../pages';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { StarshipDetails } from '../sw-components';\nimport { PlanetDetails } from '../sw-components';\n\nexport default class App extends Component {\n\n  // state-e atdigimcun burdan sildim\n  // swapiService = new DummySwapiService();\n\n  state = {\n    showRandomPlanet: true,\n    swapiService: new ApiService(),\n    isLoggedIn: false\n  };\n\n  onLogin = () => {\n    this.setState({\n      isLoggedIn: true\n    });\n  };\n\n  onLogOut = () => {\n    this.setState({\n      isLoggedIn: false\n    });\n  };\n\n  onServiceChange = () => {\n    this.setState(({ swapiService }) => {\n      const Service = swapiService instanceof ApiService ? DummySwapiService : ApiService;\n      console.log(\"swich to \" + Service.name);\n\n      return {\n        swapiService: new Service()\n      };\n    });\n  };\n\n  render() {\n\n    const { isLoggedIn } = this.state;\n\n    // asagida exact deyirki sirf bu routerde goster\n    // exact-i yigisdirsaq her yerde gosterecek\n    return (\n      <ErrorBoundry>\n        <SwapiServiceProvider value={this.state.swapiService}>\n          <Router>\n            {/* componentle de yazmaq olar, render funq-la da Route-u yazmaq olar */}\n            <div className=\"stardb-app\">\n              <Header onServiceChange={this.onServiceChange} />\n              <RandomPlanet />\n              <Switch>\n                <Route path='/stardb-react'\n                  render={() => <h2>Welcome to Star DB</h2>}\n                  exact />\n                <Route path='/stardb-react/people/:id?' exact component={PeoplePage} />\n                <Route path='/stardb-react/planets' exact component={PlanetsPage} />\n                <Route path='/stardb-react/starships' exact component={StarshipsPage} />\n                <Route path='/stardb-react/secret'\n                  render={() => (<SecretPage isLoggedIn={isLoggedIn}\n                    onLogOut={this.onLogOut}\n                    alertMessage={this.alertMessage} />)} />\n                <Route path='/stardb-react/login'\n                  render={() => (<LoginPage isLoggedIn={isLoggedIn}\n                    onLogin={this.onLogin} />)} />\n                {/* match-in komeyi ile starshipDetail-e id otururuk, url-den goturur */}\n                <Route path='/stardb-react/planets/:id'\n                  render={({ match }) => {\n                    const { id } = match.params;\n                    return <PlanetDetails itemId={id} />\n                  }} />\n                <Route path='/stardb-react/starships/:id'\n                  render={({ match }) => {\n                    const { id } = match.params;\n                    return <StarshipDetails itemId={id} />\n                  }} />\n\n                  switch-den evvelki 2 setr yalnis url zamani actionlardi\n                  ya redirect-le hell etmek olar, ya da path-i olmayan Route-la\n                  {/* <Redirect to='/'/> */}\n                  <Route render={()=> <h3 className='jumbotron text-center'>Page Not Found!</h3>}/>\n              </Switch>\n            </div>\n          </Router>\n        </SwapiServiceProvider>\n      </ErrorBoundry>\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(\n<App />,\n  document.getElementById('root'));"],"sourceRoot":""}